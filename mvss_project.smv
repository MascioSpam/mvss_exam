------------------------
-- MVSS Project       --
-- Flavio Mascetti    --
-- Student ID #262277 --
------------------------

-----------------------------------------------------------------------------
-- Model Checking:							   --
-- Handling Zero-Priced Goods of NetBill Security and Transaction Protocol --
-----------------------------------------------------------------------------

------------------------------------------------------
-- Protocol specifications:                         --
-- http://www.sti.uniurb.it/aldini/mvss/2016s2a.pdf --
------------------------------------------------------

-- List of Zero-Priced Goods protocol types
--- 1: Certified Delivery
---- Consumer states (I, PR, EPO, PD)
---- Merchant states (I, GE, EEPO, SR, PD)
---- Netbill states (I, SR, PD)
--- 2: Certified Delivery without NetBill Server
---- Consumer states (I, PR, EPO, PD)
---- Merchant states (I, GE, SR, PD)
--- 3: Verified Delivery
---- Consumer states (I, PR, EPO, PD)
---- Merchant states (I, GE, SR, PD)
--- 4: Unverified Delivery
---- Consumer states (I, PR, PD)
---- Merchant states (I, SR, PD)

--- Permutation of modules boolean variables whit resulting protocol type
--
-- C.n is Consumer.require_netbill
-- M.n is Merchant.require_netbill
-- C.e is Consumer.require_encryption
-- M.d is Merchant.delivery_confirmation
-- ______________________________
--| C.n | M.n | C.e | M.d | Type |
--|-----+-----+-----+-----+------|
--|  F  |  F  |  F  |  F  |  4   |
--|  F  |  F  |  F  |  T  |  3   |
--|  F  |  F  |  T  |  F  |  2   |
--|  F  |  F  |  T  |  T  |  2   |
--|  F  |  T  |  F  |  F  |  1   |
--|  F  |  T  |  F  |  T  |  1   |
--|  F  |  T  |  T  |  F  |  1   |
--|  F  |  T  |  T  |  T  |  1   |
--|  T  |  F  |  F  |  F  |  1   |
--|  T  |  F  |  F  |  T  |  1   |
--|  T  |  F  |  T  |  F  |  1   |
--|  T  |  F  |  T  |  T  |  1   |
--|  T  |  T  |  F  |  F  |  1   |
--|  T  |  T  |  F  |  T  |  1   |
--|  T  |  T  |  T  |  F  |  1   |
--|  T  |  T  |  T  |  T  |  1   |
--|_____|_____|_____|_____|______|

-------------
-- Modules --
-------------

-- List of consumer states:
--- I:	  Idle					Reachable from Protocol Type 1/2/3/4
--- PR:   Price Request				Reachable from Protocol Type 1/2/3/4
--- EPO:  Electronic Payment Order		Reachable from Protocol Type 1/2/3
--- PD:   Purchase done				Reachable from Protocol Type 1/2/3/4

MODULE consumer(m)
 VAR
   require_netbill : boolean;
   require_encryption : boolean;
   state : {I, PR, EPO, PD};
 
 ASSIGN
   init (require_netbill) := {TRUE, FALSE};

   -- Netbill receipt should be requested if one of the parties requires it
   next (require_netbill) := require_netbill | m.require_netbill;

   init (require_encryption) := {TRUE, FALSE};

   -- If Netbill receipt is required, goods encryption is necessary
   next (require_encryption) := require_netbill | require_encryption;

   init (state) := I;
   next (state) := case
     state = I : PR;
   -- Type 1/2/3
     state = PR & m.state = GE : EPO;
     state = EPO & m.state = SR : PD;
   -- Type 4
     state = PR & m.state = SR & !require_netbill & !m.require_netbill & !require_encryption & !m.delivery_confirmation : PD;
     TRUE : state;
   esac;


-- List of merchant states:
--- I:    Idle			Reachable from Protocol Type 1/2/3/4
--- GE:   Encrypted Goods	Reachable from Protocol Type 1/2/3
--- EEPO: Endorsed EPO		Reachable from Protocol Type 1
--- SR:   Send Result		Reachable from Protocol Type 1/2/3/4
--- PD:   Purchase done		Reachable from Protocol Type 1/2/3/4

MODULE merchant(c, n)
 VAR
   require_netbill : boolean;
   delivery_confirmation : boolean;
   state: {I, GE, EEPO, SR, PD};
 
 ASSIGN
   init (require_netbill) := {TRUE, FALSE};

   -- Netbill receipt should be requested if one of the parties requires it
   next (require_netbill) := c.require_netbill | require_netbill;

   init (delivery_confirmation) := {TRUE, FALSE};

   -- If Goods encryption is required, delivery confirmation is necessary
   next (delivery_confirmation) := c.require_encryption | delivery_confirmation;

   init (state) := I;
   next (state) := case
     state = I & c.state = PR & (c.require_encryption | delivery_confirmation | require_netbill) : GE;
   -- Type 1
     state = GE & c.state = EPO & require_netbill : EEPO;
     state = EEPO & n.state = SR & require_netbill : SR;
   -- Type 2/3
     state = GE & c.state = EPO & !require_netbill & (c.require_encryption | delivery_confirmation) : SR;
   -- Type 4
     state = I & c.state = PR & !require_netbill & !c.require_encryption & !delivery_confirmation : SR;
   -- Purchase Done for type 1,2,3
     state = SR & (require_netbill | c.require_encryption | delivery_confirmation) & c.state = PD : PD;
   -- Purchase Done for type 4
     state = SR & !(require_netbill | c.require_encryption | delivery_confirmation) : PD;
     TRUE : state;
   esac;

-- List of netbill server states:
--- I:  Idle
--- SR: Signed Result	Reachable from Protocol Type 1
--- PD: Purchase done	Reachable from Protocol Type 1

MODULE netbill(m)
 VAR
  state: {I, SR, PD};
 
 ASSIGN
   init (state) := I;
   next (state) := case
     state = I & m.require_netbill & m.state = EEPO : SR;
   -- Purchase Done
     state = SR & m.state = PD : PD;
     TRUE : state;
   esac;


MODULE main
 VAR
   c : consumer (m);
   m : merchant (c, n);
   n : netbill (m);

 -- Checking boolean values for Type 4 of Protocol
 SPEC AG ((c.require_netbill = FALSE & m.require_netbill = FALSE & c.require_encryption = FALSE & m.delivery_confirmation = FALSE) -> AG (m.state != GE | m.state != EEPO | c.state != EPO));

 -- Checking boolean values for Type 3 of Protocol
 SPEC AG ((c.require_netbill = FALSE & m.require_netbill = FALSE & c.require_encryption = FALSE & m.delivery_confirmation = TRUE) -> AG (m.state != EEPO));

 -- Checking boolean values for Type 2 of Protocol
 SPEC AG ((c.require_netbill = FALSE & m.require_netbill = FALSE & c.require_encryption = TRUE) -> AG (m.state != EEPO));

 -- Checking boolean values for Type 1 of Protocol
 SPEC AG ((c.require_netbill = TRUE & m.require_netbill = TRUE) -> AF (n.state != I));

 -- Test
 SPEC AG ((c.state = I | m.state = I) -> AX (c.require_netbill = m.require_netbill));

 -- Checking that all computation end with "Purchase Done"
 SPEC AF (c.state = PD & m.state = PD & (n.state = PD | n.state = I));

 -- Checking Protocol Type 1 (If NetBill receipt is required the module final state has to be PD)
 SPEC AG ((c.require_netbill | m.require_netbill) -> AF (n.state = PD));

 -- Checking Protocol Type 2
 SPEC AG (!(c.require_netbill | m.require_netbill) & c.require_encryption -> AG !(n.state != I | m.state = EEPO));

 -- Checking Protocol Type 3
 SPEC AG (!(c.require_netbill | m.require_netbill) & !(c.require_encryption) & m.delivery_confirmation -> AG !(n.state != I | m.state = EEPO));

 -- Checking Protocol Type 4
 SPEC AG (!(c.require_netbill | m.require_netbill) & !(c.require_encryption) & !(m.delivery_confirmation) -> AG !(n.state != I | m.state = GE | m.state = EEPO | c.state = EPO));
